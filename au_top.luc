module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_cond;
    edge_detector edge (#RISE(1), #FALL(0));    
    
    
    .rst(rst) {
      auto_tester auto_tester;
      manual_tester manual_tester;
      multi_seven_seg multi_seven_seg;
      
      fsm mode_select = {
        INPUT,
        MANUAL,
        AUTO
      };
    }
  }
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;
    
    usb_tx = usb_rx;        // echo the serial data
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    multi_seven_seg.values = {4b0,4b0,4b0,4b0};
    
    button_cond.in = io_button[3:0];
    edge.in = button_cond.out;
    auto_tester.start = 0;
    
    manual_tester.io_dip = c{io_dip[2], io_dip[1]};
    manual_tester.buttons = edge.out;

    
    case (mode_select.q) {
      mode_select.INPUT:
        if (io_button[3]){
          mode_select.d = mode_select.MANUAL;}
        
        if (io_button[4]){
          mode_select.d = mode_select.AUTO;}
        
        else {
          mode_select.d = mode_select.INPUT;}
      
      mode_select.AUTO:
       io_seg = auto_tester.io_seg;
       io_sel = auto_tester.io_sel;
       auto_tester.start = 1; 
      
      
      mode_select.MANUAL:
        io_led[2] = manual_tester.out[15:8];
        io_led[1] = manual_tester.out[7:0];
        io_led[0][3:0] = manual_tester.zvn;
        if (manual_tester.error){
        multi_seven_seg.values = {4b0110,4b0110,4b0110,4b0110};
    }
    
  }
}