module au_top (
    input clk,              // 100MHz clock
    output led[8],
    input rst_n,            // reset button (active low)
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      tester tester;
    }
  }
  
  button_conditioner buttoncond[4](.clk(clk));
  edge_detector buttondetector[4](#RISE(1), #FALL(0),.clk(clk)); //detect on rising edge only
  
  
  always {
    reset_cond.in = io_button[4]; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;
        
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    buttoncond.in = io_button[3:0];
    buttondetector.in = buttoncond.out;
    
    tester.io_dip = c{io_dip[2], io_dip[1]};
    tester.buttons = buttondetector.out;
    tester.flip_lsb = io_dip[0][0];
    
    
    io_led[2] = tester.out_result[15:8];
    io_led[1] = tester.out_result[7:0];
    io_led[0][3:0] = tester.zvn;
    io_led[0][7] = tester.error;
    io_led[0][6] = tester.test_fail;
    
  }
}